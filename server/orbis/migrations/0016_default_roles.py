# Generated by Django 3.0.5 on 2020-04-03 12:38

from django.db import migrations
from orbis.models.models_data import Access

# migration for making sure that the default roles exist,
# and map to the correct scopes,
# and are applied to the correct users.


ROLES_DATA = [
    {"name": "OrbisRole"},
    {"name": "AstrosatRole"},
    {"name": "OrkneyRole"},
]

SCOPES_DATA = [
    {"authority": "astrosat", "namespace": "core", "name": "*", "version": "*", "is_active": True, "roles": ["AstrosatRole"]},
    {"authority": "astrosat", "namespace": "test", "name": "sentinel-2-rgb", "version": "*", "is_active": True, "roles": ["AstrosatRole"]},
    {"authority": "astrosat", "namespace": "covid", "name": "*", "version": "*", "is_active": True, "roles": ["OrkneyRole"]},
]

def create_roles(apps, schema_editor):
    RoleModel = apps.get_model("astrosat_users", "UserRole")

    # create the roles if they don't already exist
    for role_data in ROLES_DATA:
        RoleModel.objects.get_or_create(**role_data)


def create_data_scopes(apps, schema_editor):
    RoleModel = apps.get_model("astrosat_users", "UserRole")
    DataScopeModel = apps.get_model("orbis", "DataScope")
    DataScopeRoleAccessModel = apps.get_model("orbis", "RoleAccess")

    # create the scopes if they don't already exist
    for scope_data in SCOPES_DATA:
        roles_data = scope_data.pop("roles")
        roles = RoleModel.objects.filter(name__in=roles_data)
        scope, _ = DataScopeModel.objects.get_or_create(**scope_data)
        for role in roles:
            # add the associated roles w/ READ access
            scope.roles.add(role)
            scope_role_access = DataScopeRoleAccessModel.objects.get(
                role=role, data_scope=scope,
            )
            scope_role_access.access = Access.READ
            scope_role_access.save()

def add_roles_to_exsiting_users(apps, schema_editor):

    UserModel = apps.get_model("astrosat_users", "User")
    RoleModel = apps.get_model("astrosat_users", "UserRole")

    astrosat_role = RoleModel.objects.get(name="AstrosatRole")
    orbis_role = RoleModel.objects.get(name="OrbisRole")
    orkney_role = RoleModel.objects.get(name="OrkneyRole")

    for user in UserModel.objects.all():
        user.roles.clear()
        # at the moment everybody gets orbis_role & orkney_role but not astrosat_role
        # at some point role management will be extended in the backend and this can be done outside of migrations
        # and life will be great
        user.roles.add(orbis_role)
        user.roles.add(orkney_role)


class Migration(migrations.Migration):

    dependencies = [
        ('orbis', '0015_auto_20200317_1717'),
    ]

    operations = [
        migrations.RunPython(
            create_roles, reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            create_data_scopes, reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            add_roles_to_exsiting_users, reverse_code=migrations.RunPython.noop
        ),
    ]
