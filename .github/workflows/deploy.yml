name: Deploy

on:
  deployment: {}
  workflow_dispatch:

# Seperate but identical jobs are unfortunately required for testing/staging/production
# because they have to each run inside their respective environment clusters
# using the `runs-on: ...` key

jobs:
  deploy-experimentation: &deploy-job
    name: Deploy Experimentation
    if: startsWith(github.event.deployment.environment, 'experimentation')
    runs-on: [self-hosted, eu-west-1-experimentation-deployer]
    timeout-minutes: 60
    steps:
      - name: Set the Deployment Status to Pending
        uses: "deliverybot/deployment-status@v1"
        with:
          state: "pending"
          token: "${{ github.token }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy the app
        run: |
          ENVIRONMENT="${{ github.event.deployment.environment }}"
          TAG="${GITHUB_SHA:0:7}"
          ./scripts/deploy.sh "${ENVIRONMENT}" "${TAG}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ASTROSAT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ASTROSAT_AWS_SECRET_ACCESS_KEY }}
          GIT_CONFIG_COUNT: 1
          GIT_CONFIG_KEY_1: "url.https://${{ github.token }}@github.com/astrosat.insteadOf"
          GIT_CONFIG_VALUE_1: "https://github.com/astrosat"

      - name: Set the Deployment Status on Success
        if: success()
        run: |
          export GITHUB_TOKEN="${{ github.token }}"
          cd scripts/create-deployment-status
          yarn install

          REPO_OWNER="$(dirname "$GITHUB_REPOSITORY")"
          REPO_NAME="$(basename "$GITHUB_REPOSITORY")"

          node createDeploymentStatus.js \
            --repo-owner $REPO_OWNER --repo-name $REPO_NAME \
            --environment ${{ github.event.deployment.environment }} \
            --status success \
            --auto-inactive

      - name: Set the Deployment Status on Failure
        if: failure()
        run: |
          export GITHUB_TOKEN="${{ github.token }}"
          cd scripts/create-deployment-status
          yarn install

          REPO_OWNER="$(dirname "$GITHUB_REPOSITORY")"
          REPO_NAME="$(basename "$GITHUB_REPOSITORY")"

          node createDeploymentStatus.js \
            --repo-owner $REPO_OWNER --repo-name $REPO_NAME \
            --environment ${{ github.event.deployment.environment }} \
            --status failure

  deploy-testing:
    <<: *deploy-job
    name: Deploy Testing
    if: startsWith(github.event.deployment.environment, 'testing')
    runs-on: [self-hosted, eu-west-1-testing-deployer]

  deploy-staging:
    <<: *deploy-job
    name: Deploy Staging
    if: startsWith(github.event.deployment.environment, 'staging')
    runs-on: [self-hosted, eu-west-1-staging-deployer]

  deploy-production:
    <<: *deploy-job
    name: Deploy Production
    if: startsWith(github.event.deployment.environment, 'production')
    runs-on: [self-hosted, eu-west-1-production-deployer]