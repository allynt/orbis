name: BUILD

on:
  push: {}

env:
  AWS_REGISTRY: 339570402237.dkr.ecr.eu-west-1.amazonaws.com
  AWS_REPOSITORY: company/orbis/django

jobs:
  client:
    name: Client-side Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js 10.x
        uses: actions/setup-node@v1
        with:
          node-version: 10.x
      - name: Cache Node Modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: frontend-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            frontend-build-
      - name: yarn install, and test
        env:
          CI: "true"
          GITHUB_REGISTRY_TOKEN: ${{ secrets.GITHUB_REGISTRY_TOKEN }}
        working-directory: client
        run: |
          yarn install
          yarn test

  server:
    name: Server-side Tests
    runs-on: ubuntu-latest
    container:
      image: python:3.6.8
      ports:
        - "8000:8000"
      env:
        SYS_ENV: ci
        DJANGO_SETTINGS_MODULE: core.settings
        DJANGO_DB_HOST: 127.0.0.1:5666
    services:
      db:
        image: kartoza/postgis:11.0-2.5
        env:
          POSTGRES_DBNAME: orbis
          POSTGRES_USER: orbis
          POSTGRES_PASS: orbis
          ALLOW_IP_RANGE: 0.0.0.0/0
        ports:
          - "5666:5432"
    steps:
      - uses: actions/checkout@v1
      - name: Setup container
        run: |
          apt-get update && apt-get install -y postgresql-client python3-gdal
          pip3 install --upgrade --no-cache-dir "pip==19.1.1"
          pip3 install --upgrade --no-cache-dir pipenv

      - name: Install Dependencies and Run Tests
        working-directory: server
        run: |
          pipenv install --dev
          pipenv run ./manage.py migrate --noinput
          pipenv run pytest ./

  docker:
    needs: [client, server]
    name: Build and tag Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup dependencies
        run: ./scripts/ci-setup-deps.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Docker Image
        run: |
          export GIT_SHA=${GITHUB_SHA:0:7}
          docker build . -t ${AWS_REGISTRY}/${AWS_REPOSITORY}:${GIT_SHA} --build-arg TOKEN=${{ secrets.GITHUB_REGISTRY_TOKEN }} -f ./Dockerfile.deployment

      - name: Push image to AWS Docker Registry
        run: |
          export GIT_SHA=${GITHUB_SHA:0:7}
          docker push ${AWS_REGISTRY}/${AWS_REPOSITORY}:${GIT_SHA}

  deploy-to-testing:
    needs: [docker]
    name: Deploy to Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup dependencies
        run: ./scripts/ci-setup-deps.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create Deployment
        run: |
          TAG="${GITHUB_SHA:0:7}"
          BRANCH="${GITHUB_REF##*/}"
          echo "TAG=$TAG"
          echo "BRANCH=$BRANCH"
          aws lambda invoke --profile staging --region eu-west-1 --function-name staging-create-github-deployment --payload "{\"owner\":\"astrosat\", \"repo\":\"orbis\", \"ref\":\"${BRANCH}\", \"environment\":\"testing\" }" -
