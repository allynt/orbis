name: BUILD

on: [push]

env:
  AWS_REGISTRY: 339570402237.dkr.ecr.eu-west-1.amazonaws.com
  AWS_REPOSITORY: company/orbis/django

jobs:
  client:
    name: Client-side Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Use Node.js 10.x
        uses: actions/setup-node@v1
        with:
          node-version: 10.x
      - name: Cache Node Modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: frontend-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            frontend-build-
      - name: yarn install, and test
        env:
          CI: "true"
          GITHUB_REGISTRY_TOKEN: ${{ secrets.GITHUB_REGISTRY_TOKEN }}
        working-directory: client
        run: |
          yarn install
          yarn test

  server:
    name: Server-side Tests
    runs-on: ubuntu-latest
    container:
      image: python:3.6.8
      ports:
        - "8000:8000"
      env:
        DJANGO_SETTINGS_MODULE: core.settings
    services:
      db:
        image: kartoza/postgis:11.0-2.5
        env:
          POSTGRES_DBNAME: orbis
          POSTGRES_USER: orbis
          POSTGRES_PASS: orbis
          ALLOW_IP_RANGE: 0.0.0.0/0
        ports:
          - "5666:5432"
    steps:
      - uses: actions/checkout@master
      - name: Setup container
        run: |
          apt-get update && apt-get install -y postgresql-client python3-gdal
          pip3 install --upgrade pip
          pip3 install --upgrade pipenv

      - name: Install Dependencies and Run Tests
        working-directory: server
        run: |
          pipenv install --dev
          pipenv run ./manage.py migrate --noinput
          pipenv run pytest ./

  docker:
    needs: [client, server]
    name: Build and tag Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install AWS CLI
        run: |
          sudo apt install python3-setuptools
          pip3 install awscli --upgrade --user
          aws --version

      - name: Setup AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to AWS
        run: |
          eval $(aws ecr get-login --no-include-email --region eu-west-1)

      - name: Build Docker Image
        run: |
          export GIT_REF=${GITHUB_REF##*/}
          export GIT_SHA=${GITHUB_SHA:0:7}
          docker build . -t ${AWS_REGISTRY}/${AWS_REPOSITORY}:${GIT_REF} -t ${AWS_REGISTRY}/${AWS_REPOSITORY}:${GIT_SHA} --build-arg COMMIT_HASH=${GIT_REF} --build-arg GIT_BRANCH=${GIT_SHA} --build-arg TOKEN=${{ secrets.GITHUB_REGISTRY_TOKEN }} -f ./Dockerfile.artifact

      - name: Push image to AWS Docker Registry
        run: |
          export GIT_REF=${GITHUB_REF##*/}
          export GIT_SHA=${GITHUB_SHA:0:7}
          docker push ${AWS_REGISTRY}/${AWS_REPOSITORY}:${GIT_REF}
          docker push ${AWS_REGISTRY}/${AWS_REPOSITORY}:${GIT_SHA}

  deploy-to-testing:
    needs: [docker]
    name: Docker Image to AWS Kubernetes
    runs-on: ubuntu-latest
    steps:
      - name: Install jsonnet
        run: |
          curl -sSL "https://github.com/google/jsonnet/releases/download/v0.14.0/jsonnet-bin-v0.14.0-linux.tar.gz" > ./jsonnet-bin-linux.tar.gz
          tar -xzf ./jsonnet-bin-linux.tar.gz
          sudo install ./jsonnet ./jsonnetfmt /usr/local/bin/
          jsonnet --version

      - name: Install aws cli
        run: |
          sudo apt install python3-setuptools
          pip3 install awscli --upgrade --user
          aws --version

      - name: Install kubectl
        run: |
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl

      - name: Setup AWS creds
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update kubeconfig
        run: aws eks --region eu-west-1 update-kubeconfig --name orbis-platform-testing

      - name: Test kubectl config
        run: kubectl version

      - name: Checkout
        uses: actions/checkout@v1

      - name: Run jsonnet
        run: |
          mkdir -p spec_generated/testing && jsonnet spec/testing.jsonnet --ext-str "tag=${GITHUB_REF##*/}" --string --multi spec_generated/testing

      - name: Deploy the App
        run: kubectl apply -f spec_generated/testing
  # e2e:
  #   name: Browser Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@master
  #   - name: Use Node.js 10.x
  #     uses: actions/setup-node@v1
  #     with:
  #       version: 10.x
  #   - name: Build front-end
  #     env:
  #       CI: "true"
  #     working-directory: client
  #     run: |
  #       yarn install
  #       yarn run build
  #   - name: Authenticate with AWS
  #     uses: actions/aws/cli@master
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  #       AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #     with:
  #       args: ecr get-login --no-include-email --region eu-west-1 | sh && docker pull 339570402237.dkr.ecr.eu-west-1.amazonaws.com/company/orbis/dashboard/cypress-runner:latest
  #   - name: Run tests
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  #       AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #     run: |
  #       echo -e "DJANGO_AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}\nDJANGO_AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" > .env.local
  #       ./scripts/run-cypress-tests.sh
